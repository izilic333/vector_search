version: '3.5'

x-restart-policy:
  &restart_policy
  restart: unless-stopped

services:
  postgres:
    <<: *restart_policy
    build:
      context: .
      dockerfile: ./pg-Dockerfile
    user: postgres
    # Speed up testing, don't think to have those settings in a production env!
    command: -c 'fsync=off' -c 'effective_io_concurrency=10' -c 'log_min_duration_statement=1000'
    environment:
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
      - POSTGRES_DB=app
    volumes:
      - data-postgres:/var/lib/postgresql/data
      - ./temp:/mnt # used for import db
    networks:
      vidoso:
        aliases:
          - postgres
    ports:
      - "5432:5432"
  etcd:
    <<: *restart_policy
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd-data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "2379:2379"
    networks:
      vidoso:
        aliases:
          - etcd

  minio:
    <<: *restart_policy
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio-data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      vidoso:
        aliases:
          - minio

  milvus-standalone:
    <<: *restart_policy
    image: milvusdb/milvus:v2.3.0
    container_name: milvus-standalone
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus-data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - etcd
      - minio
    networks:
      vidoso:
        aliases:
          - milvus-standalone
  memcached:
    image: memcached:1.6.23-alpine
    restart: unless-stopped
    networks:
      vidoso:
        aliases:
          - memcached
  redis:
    <<: *restart_policy
    image: redis:latest
    command: redis-server --appendonly yes
    volumes:
      - data-redis:/data
    ports:
      - 6379:6379
    networks:
      vidoso:
        aliases:
          - redis
  django:
    <<: *restart_policy
    build:
      context: .
      dockerfile: ./Dockerfile
    user: app
    command: >
      /bin/sh -c "./start_app.sh"
    environment:
      IPYTHONDIR: /app/.ipython
      HISTFILE: /app/.bash_history
      PYTHONDONTWRITEBYTECODE: 'x'
      PYTHONWARNINGS: default
      PYTHONBREAKPOINT: ipdb.set_trace
      PRE_COMMIT_HOME: /app/.pre-commit-cache/
      ENVIRONMENT: local.dev
    ports:
      - 8000:8000
    depends_on:
      - postgres
      - milvus-standalone
      - redis
    networks:
      vidoso:
        aliases:
          - django
    extra_hosts:
      - "host.docker.internal:host-gateway"

  celery_worker:
    <<: *restart_policy
    build:
      context: .
      dockerfile: ./Dockerfile
    user: app
    command: celery -A vidoso worker -l info -P threads
    environment:
      IPYTHONDIR: /app/.ipython
      HISTFILE: /app/.bash_history
      PYTHONDONTWRITEBYTECODE: 'x'
      PYTHONWARNINGS: default
      PYTHONBREAKPOINT: ipdb.set_trace
      PRE_COMMIT_HOME: /app/.pre-commit-cache/
      ENVIRONMENT: local.dev
    depends_on:
      - postgres
      - milvus-standalone
      - redis
    networks:
      vidoso:
        aliases:
          - celery_worker
    extra_hosts:
      - "host.docker.internal:host-gateway"

networks:
  vidoso:
    name: vidoso

volumes:
  data-postgres:
  data-redis:
  milvus-data:
  etcd-data:
  minio-data:
